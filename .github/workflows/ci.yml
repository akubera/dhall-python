jobs:
  build:
    if: "github.event.name != 'release'"
    name: Build and test wheels
    needs:
      - lint
    runs-on: "${{ matrix.os }}"
    steps:
      - uses: "actions/checkout@v2"
      - name: "Setup python ${{ matrix.python-version }}"
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: Install Rust
        uses: "actions-rs/toolchain@v1"
        with:
          override: 'true'
          toolchain: stable
      - name: Install dependencies
        run: "python -m pip install --upgrade pip\npip install poetry\ntouch Cargo.toml.orig\npoetry install"
      - name: Maturin build and pytest
        run: "poetry run maturin build\npoetry run maturin develop\npoetry run pytest tests"
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - '3.6'
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
  bump:
    if: "github.event_name == 'release' && github.event.action == 'created'"
    name: Bump minor version
    needs:
      - publish
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2"
      - name: Setup python 3.10
        uses: "actions/setup-python@v2"
        with:
          python-version: '3.10'
      - name: Install Rust
        uses: "actions-rs/toolchain@v1"
        with:
          override: 'true'
          toolchain: stable
      - name: Install dependencies
        run: "python -m pip install --upgrade pip\ncargo install cargo-bump\npip install poetry\ntouch Cargo.toml.orig\npoetry install"
      - name: Bump and push
        run: "cargo bump patch\npoetry version patch\ngit config user.name github-actions\ngit config user.email github-actions@github.com\ngit add Cargo.toml pyproject.toml\ngit commit -m \"Bump version (automatic commit)\"\ngit push"
  lint:
    name: Lint check
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2"
      - name: Setup python 3.10
        uses: "actions/setup-python@v2"
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: "python -m pip install --upgrade pip\npip install black isort autoflake"
      - name: Check lint
        run: "isort . --check --diff -rc\nblack . -- check"
  publish:
    if: "github.event_name == 'release' && github.event.action == 'created'"
    name: Publish wheels to PyPI
    needs:
      - build
    runs-on: "${{ matrix.os }}"
    steps:
      - uses: "actions/checkout@v2"
      - name: "Setup python ${{ matrix.python-version }}"
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: Install Rust
        uses: "actions-rs/toolchain@v1"
        with:
          override: 'true'
          toolchain: stable
      - name: Install dependencies
        run: "python -m pip install --upgrade pip\npip install poetry\ntouch Cargo.toml.orig\npoetry install"
      - name: Build python package
        run: "poetry run maturin build --release --strip --interpreter python${{ matrix.python-version }}"
      - if: "matrix.os == 'windows-latest'"
        name: Install wheels
        run: "pip install --find-links=target\\wheels dhall"
      - if: "matrix.os != 'windows-latest'"
        name: Install wheels
        run: "pip install target/wheels/dhall*.whl"
      - env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        if: "startsWith(github.ref, 'refs/tags'"
        name: Release
        uses: "softprops/action-gh-release@v1"
        with:
          files: "target/wheels/dhall*.whl"
      - env:
          MATURIN_PASSWORD: "${{ secrets.PYPI }}"
        name: PyPI publish
        run: "poetry run maturin publish --username __token__ --interpreter python${{ matrix.python_version }}"
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - '3.6'
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
name: CI
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  release:
    types:
      - created
  schedule:
    - cron: "20 23 * * 6"
